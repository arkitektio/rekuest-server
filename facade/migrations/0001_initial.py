# Generated by Django 3.2.16 on 2022-12-16 10:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import facade.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('lok', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This providers Name', max_length=2000)),
                ('identifier', models.CharField(default='main', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('DISCONNECTED', 'Disconnected'), ('VANILLA', 'Complete Vanilla Scenario after a forced restart of')], default='VANILLA', help_text='The Status of this Agent', max_length=1000)),
            ],
            options={
                'permissions': [('can_provide_on', 'Can provide on this Agent')],
            },
        ),
        migrations.CreateModel(
            name='Assignation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.JSONField(default=dict, help_text='The Platform context')),
                ('progress', models.IntegerField(blank=True, help_text='The progress of this assignation', null=True)),
                ('args', models.JSONField(blank=True, default=list, help_text='The Args', null=True)),
                ('kwargs', models.JSONField(blank=True, help_text='The Kwargs', null=True)),
                ('returns', models.JSONField(blank=True, help_text='The Returns', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACKNOWLEDGED', 'Acknowledged'), ('RETURNED', 'Assignation Returned (Only for Functions)'), ('DENIED', 'Denied (Assingment was rejected)'), ('ASSIGNED', 'Was able to assign to a pod'), ('PROGRESS', 'Progress (Assignment has current Progress)'), ('RECEIVED', 'Received (Assignment was received by an agent)'), ('ERROR', 'Error (Retrieable)'), ('CRITICAL', 'Critical Error (No Retries available)'), ('CANCEL', 'Assinment is beeing cancelled'), ('CANCELING', 'Cancelling (Assingment is currently being cancelled)'), ('CANCELLED', 'Assignment has been cancelled.'), ('YIELD', 'Assignment yielded a value (only for Generators)'), ('DONE', 'Assignment has finished')], default='PENDING', help_text='Current lifecycle of Assignation', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Assignation as for now', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
                ('app', models.ForeignKey(blank=True, help_text='The app is this assignation', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to='lok.lokapp')),
                ('creator', models.ForeignKey(blank=True, help_text='The creator is this assignation', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='The Assignations parent', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='facade.assignation')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pure', models.BooleanField(default=False, help_text='Is this function pure. e.g can we cache the result?')),
                ('idempotent', models.BooleanField(default=False, help_text='Is this function pure. e.g can we cache the result?')),
                ('kind', models.CharField(choices=[('generator', 'Generator'), ('function', 'Function')], default='function', help_text='Function, generator? Check async Programming Textbook', max_length=1000)),
                ('interfaces', models.JSONField(default=list, help_text='Intercae that we use to interpret the meta data')),
                ('name', models.CharField(help_text='The cleartext name of this Node', max_length=1000)),
                ('meta', models.JSONField(blank=True, help_text='Meta data about this Node', null=True)),
                ('description', models.TextField(help_text='A description for the Node')),
                ('image', models.ImageField(blank=True, help_text='Beautiful images for beautiful Nodes', null=True, upload_to='')),
                ('hash', models.CharField(help_text='The hash of the Node (completely unique)', max_length=1000, unique=True)),
                ('args', facade.fields.ArgsField(default=list, help_text='Inputs for this Node')),
                ('returns', facade.fields.ReturnField(default=list, help_text='Outputs for this Node')),
            ],
        ),
        migrations.CreateModel(
            name='Provision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique', models.UUIDField(default=uuid.uuid4, help_text='A Unique identifier for this Topic', unique=True)),
                ('mode', models.CharField(choices=[('DEBUG', 'Debug Mode (Node might be constantly evolving)'), ('PRODUCTION', 'Production Mode (Node might be constantly evolving)')], default='PRODUCTION', help_text='The Deployment Mode for this Provisions', max_length=100)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Provision', max_length=1000, unique=True)),
                ('title', models.CharField(blank=True, help_text='A Short Hand Way to identify this reservation for you', max_length=200, null=True)),
                ('dropped', models.BooleanField(default=True, help_text='Is the connection to this Provision lost?')),
                ('params', models.JSONField(blank=True, help_text='Params for the Policy (including Agent etc..)', null=True)),
                ('extensions', models.JSONField(blank=True, help_text='The Platform extensions', null=True)),
                ('context', models.JSONField(blank=True, help_text='The Platform context', null=True)),
                ('access', models.CharField(choices=[('EXCLUSIVE', 'This Topic is Only Accessible linkable for its creating User'), ('EVERYONE', 'Everyone can link to this Topic')], default='EVERYONE', help_text='Access Strategy for this Provision', max_length=100)),
                ('status', models.CharField(choices=[('PENDING', 'Pending (Request has been created and waits for its initial creation)'), ('BOUND', 'Bound (Provision was bound to an Agent)'), ('PROVIDING', 'Providing (Request has been send to its Agent and waits for Result'), ('ACTIVE', 'Active (Provision is currently active)'), ('INACTIVE', 'Inactive (Provision is currently not active)'), ('CANCELING', 'Cancelling (Provisions is currently being cancelled)'), ('LOST', 'Lost (Subscribers to this Topic have lost their connection)'), ('RECONNECTING', 'Reconnecting (We are trying to Reconnect to this Topic)'), ('DENIED', 'Denied (Provision was rejected for this User)'), ('ERROR', 'Error (Reservation was not able to be performed (See StatusMessage)'), ('CRITICAL', 'Critical (Provision resulted in an critical system error)'), ('ENDED', 'Ended (Provision was cancelled by the Platform and will no longer create Topics)'), ('CANCELLED', 'Cancelled (Provision was cancelled by the User and will no longer create Topics)')], default='PENDING', help_text='Current lifecycle of Provision', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(blank=True, help_text='Is this Provision bound to a certain Agent?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provisions', to='facade.agent')),
                ('app', models.ForeignKey(blank=True, help_text='This provision creator', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to='lok.lokapp')),
                ('creator', models.ForeignKey(blank=True, help_text='This provision creator', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('can_link_to', 'Can link a reservation to a provision')],
            },
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.ForeignKey(help_text='The Associated App', null=True, on_delete=django.db.models.deletion.CASCADE, to='lok.lokapp')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lok.lokclient')),
                ('user', models.ForeignKey(help_text='The Associated App', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('type', models.CharField(choices=[('app', 'Repository that is hosted by an App'), ('mirror', 'Repository mirrors online Repository')], default='app', max_length=4000)),
                ('name', models.CharField(help_text='The name of this Repository', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='A world-unique identifier', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The channel of this Reservation', max_length=2000, unique=True)),
                ('happy', models.BooleanField(default=False, help_text='Is this reservation happy? (aka: does it have as many linked provisions as desired')),
                ('viable', models.BooleanField(default=False, help_text='Is this reservation viable? (aka: does it have as many linked provisions as minimal')),
                ('allow_auto_request', models.BooleanField(default=False, help_text='Allow automatic requests for this reservation')),
                ('title', models.CharField(blank=True, help_text='A Short Hand Way to identify this reservation for you', max_length=200, null=True)),
                ('params', models.JSONField(default=dict, help_text='Params for the Policy (including Agent etc..)')),
                ('hash', models.CharField(default=uuid.uuid4, help_text='The hash of the Reservation', max_length=1000, unique=True)),
                ('status', models.CharField(choices=[('ROUTING', 'Routing (Reservation has been requested but no Topic found yet)'), ('NON_VIABLE', 'SHould signal that this reservation is non viable (has less linked provisions than minimalInstances)'), ('PROVIDING', 'Providing (Reservation required the provision of a new worker)'), ('WAITING', 'Waiting (We are waiting for any assignable Topic to come online)'), ('REROUTING', 'Rerouting (State of provisions this reservation connects to have changed and require Retouring)'), ('DISCONNECTED', 'Disconnect (State of provisions this reservation connects to have changed and require Retouring)'), ('DISCONNECT', 'Disconnect (State of provisions this reservation connects to have changed and require Retouring)'), ('CANCELING', 'Cancelling (Reervation is currently being cancelled)'), ('ACTIVE', 'Active (Reservation is active and accepts assignments'), ('ERROR', 'Error (Reservation was not able to be performed (See StatusMessage)'), ('ENDED', 'Ended (Reservation was ended by the the Platform and is no longer active)'), ('CANCELLED', 'Cancelled (Reservation was cancelled by user and is no longer active)'), ('CRITICAL', 'Critical (Reservation failed with an Critical Error)')], default='ROUTING', help_text='Current lifecycle of Reservation', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='Callback', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='Provider', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default='default', help_text='The Unique identifier of this Assignation', max_length=1000)),
                ('app', models.ForeignKey(blank=True, help_text='This Reservations app', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to='lok.lokapp')),
                ('creator', models.ForeignKey(blank=True, help_text='This Reservations creator', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(help_text='The node this reservation connects', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='facade.node')),
                ('provision', models.ForeignKey(blank=True, help_text='Was this Reservation caused by a Provision?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='caused_reservations', to='facade.provision')),
                ('provisions', models.ManyToManyField(blank=True, help_text='The Provisions this reservation connects', null=True, related_name='reservations', to='facade.Provision')),
            ],
            options={
                'permissions': [('can_assign', 'Can assign to this reservation')],
            },
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extenders', models.JSONField(help_text='Registered Extenders on this Model', null=True)),
                ('identifier', models.CharField(help_text='A unique identifier for this Model accross the Platform', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AppRepository',
            fields=[
                ('repository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='facade.repository')),
            ],
            bases=('facade.repository',),
        ),
        migrations.CreateModel(
            name='MirrorRepository',
            fields=[
                ('repository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='facade.repository')),
                ('url', models.URLField(blank=True, default='None', null=True, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            bases=('facade.repository',),
        ),
        migrations.CreateModel(
            name='Waiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This waiters Name', max_length=2000)),
                ('identifier', models.CharField(default='main', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('DISCONNECTED', 'Disconnected'), ('VANILLA', 'Complete Vanilla Scenario after a forced restart of')], default='VANILLA', help_text='The Status of this Waiter', max_length=1000)),
                ('registry', models.ForeignKey(help_text='The provide might be limited to a instance like ImageJ belonging to a specific person. Is nullable for backend users', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='waiters', to='facade.registry')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', models.CharField(help_text='Interface (think Function)', max_length=1000)),
                ('name', models.CharField(default='Unnamed', help_text='A name for this Template', max_length=1000)),
                ('extensions', models.JSONField(default=list, help_text='The attached extensions for this Template', max_length=2000)),
                ('policy', models.JSONField(default=dict, help_text='The attached policy for this template', max_length=2000)),
                ('params', facade.fields.ParamsField(default=dict, help_text='Params for this Template')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(help_text='Who created this template on this instance', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(help_text='The node this template is implementatig', on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='facade.node')),
                ('registry', models.ForeignKey(help_text='The associated registry for this Template', on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='facade.registry')),
            ],
            options={
                'permissions': [('providable', 'Can provide this template')],
            },
        ),
        migrations.CreateModel(
            name='ReservationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level'), ('YIELD', 'YIELD Level'), ('CANCEL', 'Cancel Level'), ('RETURN', 'YIELD Level'), ('DONE', 'Done Level'), ('EVENT', 'Event Level (only handled by plugins)')], default='INFO', max_length=200)),
                ('reservation', models.ForeignKey(help_text='The reservation this log item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='log', to='facade.reservation')),
            ],
        ),
        migrations.AddField(
            model_name='reservation',
            name='template',
            field=models.ForeignKey(blank=True, help_text='The template this reservation connects', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='facade.template'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='waiter',
            field=models.ForeignKey(help_text='This Reservations app', max_length=1000, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='facade.waiter'),
        ),
        migrations.CreateModel(
            name='ProvisionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(blank=True, max_length=20000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level'), ('YIELD', 'YIELD Level'), ('CANCEL', 'Cancel Level'), ('RETURN', 'YIELD Level'), ('DONE', 'Done Level'), ('EVENT', 'Event Level (only handled by plugins)')], default='INFO', max_length=200)),
                ('provision', models.ForeignKey(help_text='The provision this log item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='log', to='facade.provision')),
            ],
        ),
        migrations.AddField(
            model_name='provision',
            name='reservation',
            field=models.ForeignKey(blank=True, help_text='Reservation that created this provision (if we were auto created)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_provisions', to='facade.reservation'),
        ),
        migrations.AddField(
            model_name='provision',
            name='template',
            field=models.ForeignKey(blank=True, help_text='The Template for this Provision', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provisions', to='facade.template'),
        ),
        migrations.CreateModel(
            name='AssignationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level'), ('YIELD', 'YIELD Level'), ('CANCEL', 'Cancel Level'), ('RETURN', 'YIELD Level'), ('DONE', 'Done Level'), ('EVENT', 'Event Level (only handled by plugins)')], default='INFO', max_length=200)),
                ('assignation', models.ForeignKey(help_text='The reservation this log item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='log', to='facade.assignation')),
            ],
        ),
        migrations.AddField(
            model_name='assignation',
            name='provision',
            field=models.ForeignKey(blank=True, help_text='Which Provision did we end up being assigned to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.provision'),
        ),
        migrations.AddField(
            model_name='assignation',
            name='reservation',
            field=models.ForeignKey(blank=True, help_text='Which reservation are we assigning to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.reservation'),
        ),
        migrations.AddField(
            model_name='assignation',
            name='waiter',
            field=models.ForeignKey(blank=True, help_text='This Assignation app', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.waiter'),
        ),
        migrations.AddField(
            model_name='agent',
            name='registry',
            field=models.ForeignKey(help_text='The provide might be limited to a instance like ImageJ belonging to a specific person. Is nullable for backend users', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='facade.registry'),
        ),
        migrations.AddConstraint(
            model_name='waiter',
            constraint=models.UniqueConstraint(fields=('registry', 'identifier'), name='No multiple Waiters for same App and User allowed on same identifier'),
        ),
        migrations.AddConstraint(
            model_name='template',
            constraint=models.UniqueConstraint(fields=('interface', 'registry'), name='A template has unique versions for every node it trys to implement'),
        ),
        migrations.AddConstraint(
            model_name='reservation',
            constraint=models.UniqueConstraint(fields=('reference', 'node', 'waiter'), name='Equal Reservation on this App by this Waiter is already in place'),
        ),
        migrations.AddConstraint(
            model_name='registry',
            constraint=models.UniqueConstraint(fields=('client', 'user'), name='No multiple Clients for same App and User allowed'),
        ),
        migrations.AddField(
            model_name='apprepository',
            name='app',
            field=models.ForeignKey(help_text='The Associated App', null=True, on_delete=django.db.models.deletion.CASCADE, to='lok.lokapp'),
        ),
        migrations.AddConstraint(
            model_name='agent',
            constraint=models.UniqueConstraint(fields=('registry', 'identifier'), name='No multiple Agents for same App and User allowed on same identifier'),
        ),
    ]
