# Generated by Django 3.2.4 on 2021-06-21 13:29

from django.db import migrations, models
import facade.fields
import mars.names
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accessor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('get', models.TextField(blank=True, help_text='A get accessor for this model', max_length=2000, null=True)),
                ('search', models.TextField(blank=True, help_text='A selectable options query with a search Parameter', max_length=2000, null=True)),
                ('create', models.TextField(blank=True, help_text='A create Parameter for this model', max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assignation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extensions', models.JSONField(default=dict, help_text='The Platform extensions')),
                ('context', models.JSONField(default=dict, help_text='The Platform context')),
                ('args', models.JSONField(blank=True, help_text='The Args', null=True)),
                ('kwargs', models.JSONField(blank=True, help_text='The Kwargs', null=True)),
                ('returns', models.JSONField(blank=True, help_text='The Returns', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DENIED', 'Denied (Assingment was rejected)'), ('ASSIGNED', 'Was able to assign to a pod'), ('PROGRESS', 'Progress (Assignment has current Progress)'), ('ERROR', 'Error (Retrieable)'), ('CRITICAL', 'Critical Error (No Retries available)'), ('CANCEL', 'Assinment is beeing cancelled'), ('CANCELING', 'Cancelling (Assingment is currently being cancelled)'), ('CANCELLED', 'Assignment has been cancelled.'), ('YIELD', 'Assignment yielded a value (only for Generators)'), ('DONE', 'Assignment has finished')], default='PENDING', help_text='Current lifecycle of Assignation', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Assignation as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='The Callback queue once the Assignation has finished', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='The Progress queue once the Assignation has finished', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AssignationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level')], default='INFO', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extenders', models.JSONField(help_text='Registered Extenders on this Model')),
                ('identifier', models.CharField(help_text='A unique identifier for this model on the Datapoint', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('version', models.CharField(help_text='The version of the bergen API this endpoint uses', max_length=100)),
                ('inward', models.CharField(blank=True, help_text='Inward facing hostname (for Docker powered access)', max_length=100, null=True)),
                ('outward', models.CharField(blank=True, help_text='Outward facing hostname for external clients', max_length=100, null=True)),
                ('port', models.IntegerField(blank=True, help_text='Listening port', null=True)),
                ('type', models.CharField(choices=[('graphql', 'Graphql (Access through the GraphQL Interface or Ward)'), ('rest', 'Rest (Access through the GraphQL Interface or Ward)')], default='graphql', help_text='The type of datapoint', max_length=100)),
                ('needs_negotiation', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('generator', 'Generator'), ('function', 'Function')], default='function', help_text='Function, generator? Check async Programming Textbook', max_length=1000)),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The unique channel where we can reach pods of this node [depending on Stragey]', max_length=1000, unique=True)),
                ('name', models.CharField(help_text='The cleartext name of this Node', max_length=1000)),
                ('package', models.CharField(help_text='Package (think Module)', max_length=1000)),
                ('interface', models.CharField(help_text='Interface (think Function)', max_length=1000)),
                ('description', models.TextField(help_text='A description for the Node')),
                ('image', models.ImageField(blank=True, help_text='A short description what this Node does', null=True, upload_to='')),
                ('args', facade.fields.ArgsField(default=list, help_text='Inputs for this Node')),
                ('kwargs', facade.fields.KwargsField(default=list, help_text='Inputs for this Node')),
                ('returns', facade.fields.ReturnField(default=list, help_text='Outputs for this Node')),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This providers Name', max_length=2000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('active', models.BooleanField(default=False, help_text='Is this Provider active right now?')),
            ],
        ),
        migrations.CreateModel(
            name='Provision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique', models.UUIDField(default=uuid.uuid4, help_text='A Unique identifier for this Topic', unique=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Provision', max_length=1000, unique=True)),
                ('params', models.JSONField(blank=True, help_text='Params for the Policy (including Provider etc..)', null=True)),
                ('extensions', models.JSONField(blank=True, help_text='The Platform extensions', null=True)),
                ('context', models.JSONField(blank=True, help_text='The Platform context', null=True)),
                ('access', models.CharField(choices=[('EXCLUSIVE', 'This Topic is Only Accessible linkable for its creating User'), ('EVERYONE', 'Everyone can link to this Topic')], default='EVERYONE', help_text='Access Strategy for this Provision', max_length=100)),
                ('status', models.CharField(choices=[('PENDING', 'Pending (Request has been created and waits for its initial creation)'), ('PROVIDING', 'Providing (Request has been send to its Provider and waits for Result'), ('ACTIVE', 'Active (Provision is currently active)'), ('INACTIVE', 'Inactive (Provision is currently not active)'), ('CANCELING', 'Cancelling (Provisions is currently being cancelled)'), ('LOST', 'Lost (Subscribers to this Topic have lost their connection)'), ('RECONNECTING', 'Reconnecting (We are trying to Reconnect to this Topic)'), ('DENIED', 'Denied (Provision was rejected for this User)'), ('ERROR', 'Error (Reservation was not able to be performed (See StatusMessage)'), ('CRITICAL', 'Critical (Provision resulted in an critical system error)'), ('ENDED', 'Ended (Provision was cancelled by the Platform and will no longer create Topics)'), ('CANCELLED', 'Cancelled (Provision was cancelled by the User and will no longer create Topics)')], default='PENDING', help_text='Current lifecycle of Provision', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='Callback', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='Provider', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProvisionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(blank=True, max_length=20000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level')], default='INFO', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('type', models.CharField(choices=[('app', 'Repository that is hosted by an App'), ('mirror', 'Repository mirrors online Repository')], default='app', max_length=4000)),
                ('mirror', models.URLField(blank=True, default='None', null=True, unique=True)),
                ('name', models.CharField(help_text='The name of this Repository', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='A world-unique identifier', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The channel of this Reservation', max_length=2000, unique=True)),
                ('title', models.CharField(blank=True, help_text='A Short Hand Way to identify this reservation for you', max_length=200, null=True)),
                ('params', models.JSONField(default=dict, help_text='Params for the Policy (including Provider etc..)')),
                ('extensions', models.JSONField(default=dict, help_text='The Platform extensions')),
                ('context', models.JSONField(default=dict, help_text='The Platform context')),
                ('status', models.CharField(choices=[('ROUTING', 'Routing (Reservation has been requested but no Topic found yet)'), ('PROVIDING', 'Providing (Reservation required the provision of a new worker)'), ('WAITING', 'Waiting (We are waiting for any assignable Topic to come online)'), ('REROUTING', 'Rerouting (State of Topics this reservation connects to have changed and require Retouring)'), ('CANCELING', 'Cancelling (Reervation is currently being cancelled)'), ('ACTIVE', 'Active (Reservation is active and accepts assignments'), ('ERROR', 'Error (Reservation was not able to be performed (See StatusMessage)'), ('ENDED', 'Ended (Reservation was ended by the the Platform and is no longer active)'), ('CANCELLED', 'Cancelled (Reservation was cancelled by user and is no longer active)'), ('CRITICAL', 'Critical (Reservation failed with an Critical Error)')], default='ACTIVE', help_text='Current lifecycle of Reservation', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='Callback', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='Provider', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReservationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('level', models.CharField(choices=[('CRITICAL', 'CRITICAL Level'), ('INFO', 'INFO Level'), ('DEBUG', 'DEBUG Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level')], default='INFO', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=mars.names.generate_random_name, help_text='A name for this Template', max_length=1000)),
                ('policy', models.JSONField(default=dict, help_text='The attached policy for this template', max_length=2000)),
                ('params', facade.fields.ParamsField(default=dict, help_text='Params for this Template')),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The unique channel where we can reach pods of this template [depending on Stragey]', max_length=1000, unique=True)),
                ('version', models.CharField(help_text='A short descriptor for the kind of version', max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
    ]
