# Generated by Django 3.1.7 on 2021-03-29 13:07

from django.db import migrations, models
import django.db.models.deletion
import facade.fields
import mars.names
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assignation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('args', models.JSONField(blank=True, help_text='The Args', null=True)),
                ('kwargs', models.JSONField(blank=True, help_text='The Kwargs', null=True)),
                ('returns', models.JSONField(blank=True, help_text='The Returns', null=True)),
                ('outputs', facade.fields.OutputsField(blank=True, help_text='The Outputs', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DENIED', 'Denied (Assingment was rejected)'), ('ASSIGNED', 'Was able to assign to a pod'), ('PROGRESS', 'Progress (Assignment has current Progress)'), ('ERROR', 'Error (Retrieable)'), ('CRITICAL', 'Critical Error (No Retries available)'), ('CANCEL', 'Assinment is beeing cancelled'), ('CANCELLED', 'Assignment has been cancelled.'), ('YIELD', 'Assignment yielded a value (only for Generators)'), ('DONE', 'Assignment has finished')], default='PENDING', help_text='Current lifecycle of Assignation', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Assignation as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='The Callback queue once the Assignation has finished', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='The Progress queue once the Assignation has finished', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This providers Name', max_length=2000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('active', models.BooleanField(default=False, help_text='Is this Provider active right now?')),
            ],
        ),
        migrations.CreateModel(
            name='BaseRepository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(help_text='The name of this Repository', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='A world-unique identifier', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Commission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.UUIDField(default=uuid.uuid4, help_text='A Unique identifier for this Commision', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extenders', models.JSONField(help_text='Registered Extenders on this Model')),
                ('identifier', models.CharField(help_text='A unique identifier for this model on the Datapoint', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('version', models.CharField(help_text='The version of the bergen API this endpoint uses', max_length=100)),
                ('inward', models.CharField(help_text='Inward facing hostname (for Docker powered access)', max_length=100)),
                ('outward', models.CharField(help_text='Outward facing hostname for external clients', max_length=100)),
                ('port', models.IntegerField(help_text='Listening port')),
                ('type', models.CharField(choices=[('graphql', 'Graphql (Access through the GraphQL Interface or Ward)'), ('rest', 'Rest (Access through the GraphQL Interface or Ward)')], default='graphql', help_text='The type of datapoint', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('generator', 'Generator'), ('function', 'Function')], default='function', help_text='Function, generator? Check async Programming Textbook', max_length=1000)),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The unique channel where we can reach pods of this node [depending on Stragey]', max_length=1000, unique=True)),
                ('name', models.CharField(help_text='The cleartext name of this Node', max_length=1000)),
                ('package', models.CharField(help_text='Package (think Module)', max_length=1000)),
                ('interface', models.CharField(help_text='Interface (think Function)', max_length=1000)),
                ('description', models.TextField(help_text='A description for the Node')),
                ('image', models.ImageField(blank=True, help_text='A short description what this Node does', null=True, upload_to='')),
                ('args', facade.fields.ArgsField(default=list, help_text='Inputs for this Node')),
                ('kwargs', facade.fields.KwargsField(default=list, help_text='Inputs for this Node')),
                ('returns', facade.fields.ReturnField(default=list, help_text='Outputs for this Node')),
            ],
        ),
        migrations.CreateModel(
            name='Pod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DOWN', 'Down'), ('ERROR', 'Error'), ('PENDING', 'Pending'), ('ACTIVE', 'Active')], default='PENDING', help_text='Which lifecycle moment is this pod in', max_length=300)),
                ('mode', models.CharField(choices=[('producton', 'Production (runs in)'), ('debug', 'Debug (Pod is currently debugging)'), ('test', 'Pod is currently being tested')], default='producton', help_text='The mode this pod is running in', max_length=100)),
                ('strategy', models.CharField(choices=[('exclusive', 'Pod listens only to event that are happening through provisions'), ('template', 'Pod listens too template events'), ('node', 'Pod listens too Node assignation events')], default='node', help_text='The stragey of this pod', max_length=100)),
                ('name', models.CharField(default=mars.names.generate_random_name, help_text='A unique name for this pod', max_length=300)),
                ('unique', models.UUIDField(default=uuid.uuid4, help_text='A Unique identifier for this Pod', unique=True)),
                ('channel', facade.fields.PodChannel(default=uuid.uuid4, help_text='The exclusive channel where the Pod listens to [depending on Stragey]', max_length=5000, unique=True)),
                ('statusmessage', models.CharField(blank=True, help_text='This pods Status', max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Provision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params', models.JSONField(blank=True, help_text='Params for the Policy (including Provider etc..)', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DENIED', 'Denied (Provision was rejected)'), ('PROGRESS', 'Progress (Provision has current Progress)'), ('ERROR', 'Error (Retrieable)'), ('CRITICAL', 'Critical Error (No Retries available)'), ('CANCEL', 'Provision is beeing cancelled'), ('CANCELLED', 'Provision has been cancelled.'), ('DONE', 'Provision has finished (pod is available and will connect)')], default='PENDING', help_text='Current lifecycle of Provision', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='Callback', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='Provider', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('params', models.JSONField(blank=True, help_text='Params for the Policy (including Provider etc..)', null=True)),
                ('channel', models.CharField(max_length=6000)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('DENIED', 'Denied (Provision was rejected)'), ('PROGRESS', 'Progress (Provision has current Progress)'), ('ERROR', 'Error (Retrieable)'), ('CRITICAL', 'Critical Error (No Retries available)'), ('CANCEL', 'Provision is beeing cancelled'), ('CANCELLED', 'Provision has been cancelled.'), ('DONE', 'Provision has finished (pod is available and will connect)')], default='PENDING', help_text='Current lifecycle of Provision', max_length=300)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('callback', models.CharField(blank=True, help_text='Callback', max_length=1000, null=True)),
                ('progress', models.CharField(blank=True, help_text='Provider', max_length=1000, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation', max_length=1000, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(help_text='The version of the bergen API this endpoint uses', max_length=100)),
                ('inward', models.CharField(help_text='Inward facing hostname (for Docker powered access)', max_length=100)),
                ('outward', models.CharField(help_text='Outward facing hostname for external clients', max_length=100)),
                ('types', models.JSONField(help_text='The extensions to the protocol it provides')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('port', models.IntegerField(help_text='Listening port')),
            ],
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=mars.names.generate_random_name, help_text='A name for this Template', max_length=1000)),
                ('policy', models.JSONField(default=dict, help_text='The attached policy for this template', max_length=2000)),
                ('params', facade.fields.ParamsField(default=dict, help_text='Params for this Template')),
                ('channel', models.CharField(default=uuid.uuid4, help_text='The unique channel where we can reach pods of this template [depending on Stragey]', max_length=1000, unique=True)),
                ('version', models.CharField(help_text='A short descriptor for the kind of version', max_length=400)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AppProvider',
            fields=[
                ('baseprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='facade.baseprovider')),
                ('client_id', models.CharField(help_text='External Clients are authorized via the App ID', max_length=6000)),
            ],
            bases=('facade.baseprovider',),
        ),
        migrations.CreateModel(
            name='AppRepository',
            fields=[
                ('baserepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='facade.baserepository')),
                ('client_id', models.CharField(help_text='External Clients are authorized via the App ID', max_length=6000)),
            ],
            bases=('facade.baserepository',),
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('baseprovider_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='facade.baseprovider')),
            ],
            bases=('facade.baseprovider',),
        ),
    ]
