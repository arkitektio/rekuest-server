schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Accessor {
  id: ID!
  model: DataModel!
  get: String
  search: String
  create: String
}

interface ArgPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
}

input ArgPortInput {
  key: String!
  type: String!
  description: String
  label: String
  identifier: String
  widget: WidgetInput
}

type Assignation {
  id: ID!
  node: Node
  template: Template
  topic: Topic
  reservation: Reservation
  args: GenericScalar
  kwargs: GenericScalar
  returns: GenericScalar
  outputs: GenericScalar
  status: AssignationStatus!
  statusmessage: String!
  callback: String
  progress: String
  createdAt: DateTime!
  updatedAt: DateTime!
  reference: String!
  creator: HerreUser
  app: HerreApp
  parent: Assignation
  children: [Assignation!]!
  log: [AssignationLog!]!
}

type AssignationEvent {
  log: AssignationLogEvent
}

type AssignationLog {
  id: ID!
  reservation: Assignation!
  message: String
  level: AssignationLogLevel!
}

type AssignationLogEvent {
  message: String
  level: String
}

enum AssignationLogLevel {
  INFO
  DEBUG
  ERROR
}

enum AssignationStatus {
  PENDING
  DENIED
  ASSIGNED
  PROGRESS
  ERROR
  CRITICAL
  CANCEL
  CANCELLED
  YIELD
  DONE
}

enum AssignationStatusInput {
  PENDING
  DENIED
  ASSIGNED
  PROGRESS
  ERROR
  CRITICAL
  CANCEL
  CANCELLED
  YIELD
  DONE
}

type AssignationsEvent {
  ended: ID
  update: Assignation
  create: Assignation
}

enum ClientTypeInput {
  HOST
  CLIENT
  PROVIDER
  POINT
}

type DataModel {
  id: ID!
  point: DataPoint!
  extenders: GenericScalar
  identifier: String!
  accessor: Accessor
}

type DataPoint {
  id: ID!
  installedAt: DateTime!
  app: HerreApp!
  user: HerreUser
  version: String!
  inward: String
  outward: String
  port: Int
  type: DataPointType!
  needsNegotiation: Boolean!
  models: [DataModel!]!
  distinct: String
}

enum DataPointType {
  GRAPHQL
  REST
}

enum DataPointTypeInput {
  GRAPHQL
  REST
}

scalar DateTime

scalar GenericScalar

type HerreApp {
  id: ID!
  clientId: String!
  name: String!
  grantType: HerreAppGrantType!
  datapointSet: [DataPoint!]!
  repositorySet: [Repository!]!
  providerSet: [Provider!]!
  provisionSet: [Provision!]!
  reservationSet: [Reservation!]!
  assignationSet: [Assignation!]!
}

enum HerreAppGrantType {
  CLIENT_CREDENTIALS
  IMPLICIT
  AUTHORIZATION_CODE
  PASSWORD
  SESSION
}

type HerreUser {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  roles: GenericScalar
  datapointSet: [DataPoint!]!
  repositorySet: [Repository!]!
  providerSet: [Provider!]!
  templateSet: [Template!]!
  provisionSet: [Provision!]!
  reservationSet: [Reservation!]!
  assignationSet: [Assignation!]!
}

enum HostProtocol {
  WEBSOCKET
}

type HostSettings {
  type: HostProtocol
  kwargs: GenericScalar
}

type IntArgPort implements ArgPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  default: Int
}

type IntKwargPort implements KwargPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  default: Int
}

type IntReturnPort implements ReturnPort {
  type: String
  key: String
  label: String
  description: String
}

type IntWidget implements Widget {
  type: String
  dependencies: [String]
  query: String
}

interface KwargPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
}

input KwargPortInput {
  key: String!
  type: String!
  description: String
  label: String
  default: GenericScalar
  identifier: String
  widget: WidgetInput
}

type ModelArgPort implements ArgPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  identifier: String
}

type ModelKwargPort implements KwargPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  identifier: String
}

type ModelReturnPort implements ReturnPort {
  type: String
  key: String
  label: String
  description: String
  identifier: String
}

type Mutation {
  createNode(args: [ArgPortInput], description: String, interface: String!, kwargs: [KwargPortInput], name: String!, package: String, returns: [ReturnPortInput], type: NodeTypeInput = function): Node
  negotiate(clientType: ClientTypeInput, internal: Boolean, inward: String, needsNegotiation: Boolean = false, outward: String, pointType: DataPointTypeInput = graphql, port: Int, version: String): Transcript
  host(extenders: [String], identifier: String!): DataModel
  createTemplate(node: ID!, params: GenericScalar, policy: GenericScalar): Template
  reserve(node: ID, params: GenericScalar, reference: String, template: ID): Reservation
  unreserve(reference: String, reservation: String): Unreserve
  assign(args: [GenericScalar]!, kwargs: GenericScalar, reservation: String!): Assignation
  unassign(assignation: String, reference: String): Unassign
}

type Node {
  id: ID!
  type: NodeType!
  repository: Repository
  channel: String!
  name: String!
  package: String!
  interface: String!
  description: String!
  image: String
  args: [ArgPort]
  kwargs: [KwargPort]
  returns: [ReturnPort]
  templates(node: ID, package: String, interface: String, provided: Boolean, providable: Boolean): [Template]
  reservations: [Reservation!]!
  assignationSet: [Assignation!]!
}

enum NodeType {
  GENERATOR
  FUNCTION
}

enum NodeTypeInput {
  GENERATOR
  FUNCTION
}

enum PodStatusInput {
  DOWN
  ERROR
  PENDING
  ACTIVE
}

type PointSettings {
  type: String
}

enum PostmanProtocol {
  WEBSOCKET
  KAFKA
  RABBITMQ
}

type PostmanSettings {
  type: PostmanProtocol
  kwargs: GenericScalar
}

type Provider {
  id: ID!
  installedAt: DateTime!
  name: String!
  unique: String!
  active: Boolean!
  app: HerreApp!
  user: HerreUser
  templateSet: [Template!]!
}

enum ProviderProtocol {
  WEBSOCKET
}

type ProviderSettings {
  type: ProviderProtocol
  kwargs: GenericScalar
}

type Provision {
  id: ID!
  reference: String!
  parent: Provision
  reservation: Reservation
  template: Template
  params: GenericScalar
  extensions: GenericScalar
  context: GenericScalar
  status: ProvisionStatus!
  statusmessage: String!
  callback: String
  progress: String
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: HerreUser
  app: HerreApp
  children: [Provision!]!
  topic: Topic
}

enum ProvisionStatus {
  PENDING
  PROVIDING
  DENIED
  CRITICAL
  ENDED
  CANCELLED
}

type Query {
  hello: String
  void: String
  node(id: ID, package: String, interface: String): Node
  nodes(name: String, search: String, type: String, argTypes: [String]): [Node]
  template(id: ID): Template
  templates(node: ID, package: String, interface: String, provided: Boolean, providable: Boolean): [Template]
  provider(id: ID): Provider
  providers(active: Boolean, app: String): [Provider]
  topic(id: ID): Topic
  topics(status: PodStatusInput, provider: String): [Topic]
  myTopics: [Topic]
  model(id: ID, identifier: String): DataModel
  models: [DataModel]
  reservation(reference: ID!): Reservation
  reservations: [Reservation]
  myReservations: [Reservation]
  assignation(reference: ID!): Assignation
  myAssignations(exclude: [AssignationStatusInput], filter: [AssignationStatusInput]): [Assignation]
  accesor(model: ID!): Accessor
  accessor: [Accessor]
}

type QueryWidget implements Widget {
  type: String
  dependencies: [String]
  query: String
}

type Repository {
  id: ID!
  installedAt: DateTime!
  name: String!
  unique: String!
  app: HerreApp!
  user: HerreUser
  nodes: [Node!]!
}

type Reservation {
  id: ID!
  channel: String!
  node: Node
  template: Template
  topic: [Topic!]!
  params: GenericScalar
  extensions: GenericScalar
  context: GenericScalar
  status: ReservationStatus!
  statusmessage: String!
  callback: String
  progress: String
  createdAt: DateTime!
  updatedAt: DateTime!
  app: HerreApp
  parent: Reservation
  creator: HerreUser
  reference: String!
  log: [ReservationLog!]!
  provisions: [Provision!]!
  children: [Reservation!]!
  assignations: [Assignation!]!
}

type ReservationEvent {
  log: ReservationLogEvent
}

type ReservationLog {
  id: ID!
  reservation: Reservation!
  message: String
  level: ReservationLogLevel!
}

type ReservationLogEvent {
  message: String
  level: String
}

enum ReservationLogLevel {
  INFO
  DEBUG
  ERROR
}

enum ReservationStatus {
  ROUTING
  PROVIDING
  WAITING
  REROUTING
  CANCELING
  ACTIVE
  ERROR
  ENDED
  CANCELLED
  CRITICAL
}

type ReservationsEvent {
  ended: ID
  update: Reservation
  create: Reservation
}

interface ReturnPort {
  type: String
  key: String
  label: String
  description: String
}

input ReturnPortInput {
  key: String!
  type: String!
  description: String
  label: String
  identifier: String
}

type StringArgPort implements ArgPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  default: String
}

type StringKwargPort implements KwargPort {
  key: String
  type: String
  label: String
  description: String
  required: Boolean
  widget: Widget
  default: String
}

type StringReturnPort implements ReturnPort {
  type: String
  key: String
  label: String
  description: String
}

type StringWidget implements Widget {
  type: String
  dependencies: [String]
}

type Subscription {
  myReservationsEvent(level: String): ReservationsEvent
  assignationEvent(level: String, reference: ID!): AssignationEvent
  myAssignationsEvent(level: String): AssignationsEvent
  reservationEvent(level: String, reference: ID!): ReservationEvent
}

type Template {
  id: ID!
  node: Node!
  provider: Provider!
  name: String!
  policy: GenericScalar
  params: GenericScalar
  channel: String!
  creator: HerreUser
  version: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  provisions: [Provision!]!
  topics: [Topic!]!
  reservations: [Reservation!]!
  assignationSet: [Assignation!]!
}

type Topic {
  id: ID!
  unique: UUID!
  provision: Provision
  template: Template!
  access: TopicAccess!
  name: String!
  status: TopicStatus!
  statusmessage: String!
  reservations: [Reservation!]!
  assignations: [Assignation!]!
}

enum TopicAccess {
  EXCLUSIVE
  EVERYONE
}

enum TopicStatus {
  DOWN
  LOST
  RECONNECTING
  CRITICAL
  ACTIVE
}

type Transcript {
  wards: [WardSettings]
  extensions: GenericScalar
  point: PointSettings
  postman: PostmanSettings
  host: HostSettings
  provider: ProviderSettings
  timestamp: DateTime
  models: [DataModel]
}

scalar UUID

type Unassign {
  reference: String
}

type Unreserve {
  reference: String
}

type WardSettings {
  type: WardTypes
  needsNegotiation: Boolean
  host: String
  port: Int
  distinct: String
}

enum WardTypes {
  GRAPHQL
  REST
}

interface Widget {
  type: String
  dependencies: [String]
}

input WidgetInput {
  type: String!
  query: String
  dependencies: [String]
  max: String
  min: String
}
